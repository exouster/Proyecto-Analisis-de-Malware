import requests, zipfile, os, shutil, glob, yara 

def create(folder):                     #Crea carpeta si no existe
    if not os.path.exists(folder):
        os.mkdir(folder)

def copyfiles(src,dst):                 #Si existen archivos .yar copia a su respectivo path
    for root, dirs, files in os.walk(src):
        for filename in files:
            if('.yara' in filename or '.yar' in filename):
                shutil.copy(os.path.join(root, filename), os.path.join(dst,filename))

def unzip(filename, dst):               #Descomprimir zip
    with zipfile.ZipFile(filename, 'r') as zip_ref:
        zip_ref.extractall(dst)

def download(dst, path):                #Descargar Zip
    r = requests.get(path)
    open(dst, 'wb').write(r.content)

def compile(filepaths, save_folder):    #Compilacion de todas las reglas Yara
    compiled_rules = dict()
    for folder in filepaths:            #Recorre todas las carpetas 
        for filename in glob.glob(folder + '/*.yar*'):                       #Recorre cada .yar en carpeta. 
            namespace = os.path.basename(os.path.splitext(filename)[0])     
            compiled_rules[namespace] = filename                            #AÃ±ade al diccionario
    rules = yara.compile(filepaths = compiled_rules)                        #Compila todo
    if os.path.exists(save_folder):                                         #Guarda Ejecutable
        os.remove(save_folder)
    rules.save(save_folder)

def rulescarp():
    try:
        os.stat("rules")
    except:
        os.mkdir("rules")

rulescarp()

root = os.path.dirname(os.path.abspath(__file__))                   #Direcctorio actual
compiled_rules = os.path.join(root,"rules", "rules-compiled")

# Zip filename
cape_filename = os.path.join(root, 'CAPEv2.zip')                                        #Nombre Carpeta Comprimido
reversingLabs_filename = os.path.join(root, 'reversinglabs-yara-rules-develop.zip')
threat_research_filename = os.path.join(root, 'Yara-Rules-master.zip')
SupportIntelligence_filename = os.path.join(root, 'Icewater-master.zip')
StrangerealIntel_filename = os.path.join(root, 'Orion-main.zip')
malpedia_filename = os.path.join(root, 'signator-rules-main.zip')

# Folder unzip
capev2_folder = os.path.join(root, 'CAPEv2-master')                                     #Nombre Carpeta Descomprimido
yara_cape_folder = os.path.join(root, 'CAPEv2-master', 'data', 'yara', 'CAPE')          #Direccion de donde estan las reglas Yara de Cape
reversingLabs_folder = os.path.join(root, 'reversinglabs-yara-rules-develop')
threat_research_folder = os.path.join(root, 'Yara-Rules-master')
SupportIntelligence_folder = os.path.join(root, 'Icewater-master')
StrangerealIntel_folder = os.path.join(root, 'Orion-main')
malpedia_folder = os.path.join(root, 'signator-rules-main')

# Local folders
local_cape_folder = os.path.join(root, 'rules', 'Cape')                                 #Direccion donde van a estar Cape
local_reversingLabs_folder = os.path.join(root, 'rules', 'reversingLabs')               #Direccion donde van a estar ReversingLabs
local_threat_research_folder = os.path.join(root, 'rules', 'threat_research')
local_SupportIntelligence_folder = os.path.join(root, 'rules', 'SupportIntelligence')
local_StrangerealIntel_folder = os.path.join(root, 'rules', 'StrangerealIntel')
local_malpedia_folder = os.path.join(root, 'rules', 'malpedia')

# Directories to compile
directories = [local_cape_folder, local_reversingLabs_folder, local_threat_research_folder, local_SupportIntelligence_folder, local_StrangerealIntel_folder, local_malpedia_folder]                           #Dir a compilar

# CAPEv2                                                                                #Descarga, descomprime, crea diro rules/Cape,copia dir descomprimido borra dir comprimido de Cape y borra zip
download(dst=cape_filename, path='https://codeload.github.com/kevoreilly/CAPEv2/zip/refs/heads/master')
unzip(filename=cape_filename, dst=root)
create(folder=local_cape_folder)                                                        
shutil.copytree(src=yara_cape_folder, dst=local_cape_folder, dirs_exist_ok=True)
shutil.rmtree(capev2_folder)
os.remove(cape_filename)

#ReversingLabs                                                                          #Descarga, descomprime, crea dir rules/reversingLabs,copia dir descomprimido, borra dir comprimido de ReversingLabs y borra zip
download(dst=reversingLabs_filename, path='https://codeload.github.com/reversinglabs/reversinglabs-yara-rules/zip/refs/heads/develop')
unzip(filename=reversingLabs_filename, dst=root)
create(folder=local_reversingLabs_folder)
copyfiles(reversingLabs_folder, local_reversingLabs_folder)
shutil.rmtree(reversingLabs_folder)
os.remove(reversingLabs_filename)

#yararules1                                                                          #Descarga, descomprime, crea dir rules/reversingLabs,copia dir descomprimido, borra dir comprimido de ReversingLabs y borra zip
download(dst=threat_research_filename, path='https://codeload.github.com/advanced-threat-research/Yara-Rules/zip/refs/heads/master')
unzip(threat_research_filename, dst=root)
create(folder=local_threat_research_folder)
copyfiles(threat_research_folder, local_threat_research_folder)
shutil.rmtree(threat_research_folder)
os.remove(threat_research_filename)

#yararules1                                                                          #Descarga, descomprime, crea dir rules/reversingLabs,copia dir descomprimido, borra dir comprimido de ReversingLabs y borra zip
download(dst=SupportIntelligence_filename, path='https://codeload.github.com/SupportIntelligence/Icewater/zip/refs/heads/master')
unzip(SupportIntelligence_filename, dst=root)
create(folder=local_SupportIntelligence_folder)
copyfiles(SupportIntelligence_folder, local_SupportIntelligence_folder)
shutil.rmtree(SupportIntelligence_folder)
os.remove(SupportIntelligence_filename)

download(dst=StrangerealIntel_filename, path='https://codeload.github.com/StrangerealIntel/Orion/zip/refs/heads/main')
unzip(StrangerealIntel_filename, dst=root)
create(folder=local_StrangerealIntel_folder)
copyfiles(StrangerealIntel_folder, local_StrangerealIntel_folder)
shutil.rmtree(StrangerealIntel_folder)
os.remove(StrangerealIntel_filename)


download(dst=malpedia_filename, path='https://codeload.github.com/malpedia/signator-rules/zip/refs/heads/main')
unzip(malpedia_filename, dst=root)
create(folder=local_malpedia_folder)
copyfiles(malpedia_folder, local_malpedia_folder)
shutil.rmtree(malpedia_folder)
os.remove(malpedia_filename)

compile(directories, compiled_rules)
